/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.15
 * Generated at: 2015-08-10 20:40:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<meta name=\"keywords\" content=\"\" />\r\n");
      out.write("<meta name=\"description\" content=\"\" />\r\n");
      out.write("<meta name=\"author\" content=\"PENHCHET\" />\r\n");
      out.write("<meta name=\"copyright\" content=\"&copy;2015\" />\r\n");
      out.write("<title>WEBSOCKET HOME</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>WEBSOCKET HOME</h1>\r\n");
      out.write("\t<h1>Collaborative Whiteboard App</h1>\r\n");
      out.write("\r\n");
      out.write("\t<div id=\"output\"></div>\r\n");
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\tvar wsURI = \"ws://\" + document.location.host\r\n");
      out.write("\t\t\t\t+ document.location.pathname + \"whiteboardendpoint\";\r\n");
      out.write("\t\tif (!(\"WebSocket\" in window)) {\r\n");
      out.write("\t\t\talert(\"WEB SOCKET ARE NOT IN WINDOWS...\")\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\talert(\"WEB SOCKET ARE IN WINDOWS...\")\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//var wsURI = \"ws://localhost:8080/Ch10_WebSocket/whiteboardendpoint\";\r\n");
      out.write("\t\tvar connection = new WebSocket(wsURI);\r\n");
      out.write("\t\tconnection.binaryType = 'arraybuffer';\r\n");
      out.write("\r\n");
      out.write("\t\tconnection.onopen = function(event) {\r\n");
      out.write("\t\t\tonOpen(event);\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tconnection.onerror = function(event) {\r\n");
      out.write("\t\t\tonError(event);\r\n");
      out.write("\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tconnection.onmessage = function(event) {\r\n");
      out.write("\t\t\tonMessage(event);\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction onOpen(event) {\r\n");
      out.write("\t\t\tconsole.log(event);\r\n");
      out.write("\t\t\tdocument.getElementById(\"output\").innerHTML += \"Connected to \"\r\n");
      out.write("\t\t\t\t\t+ wsURI + \"<br>\";\r\n");
      out.write("\t\t\tif (connection.readyState != WebSocket.OPEN) {\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif (connection.bufferedAmount == 0){\r\n");
      out.write("\t\t\t\tconnection.send(\"HELLO WORLD\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction onError(event) {\r\n");
      out.write("\t\t\tconsole.log(event);\r\n");
      out.write("\t\t\tvar message = '<span style=\"color: red;\">ERROR:</span> '\r\n");
      out.write("\t\t\t\t\t+ event.data;\r\n");
      out.write("\t\t\tdocument.getElementById(\"output\").innerHTML += message + \"<br>\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction onMessage(event) {\r\n");
      out.write("\t\t\tconsole.log(event.data);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
