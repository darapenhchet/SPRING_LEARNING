package com.spring.site.controller.rest;

import java.util.List;

import javax.inject.Inject;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.spring.config.annotation.RestEndpoint;
import com.spring.site.entity.Account;
import com.spring.site.exception.ResourceNotFoundException;
import com.spring.site.form.AccountForm;
import com.spring.site.service.AccountService;

@RestEndpoint
public class AccountRestEndpoint {

	@Inject AccountService accountService;
	
	@RequestMapping(value = "account", method = RequestMethod.OPTIONS)
	public ResponseEntity<Void> discover(){
		HttpHeaders headers = new HttpHeaders();
		headers.add("Allow", "OPTIONS,HEAD,GET,POST");
		return new ResponseEntity<Void>(null, headers, HttpStatus.NO_CONTENT);
	}
	
	@RequestMapping(value = "account/{id}", method = RequestMethod.OPTIONS)
	public ResponseEntity<Void> discover(@PathVariable("id") long id){
		if(this.accountService.getAccount(id) == null){
			throw new ResourceNotFoundException();
		}
		
		HttpHeaders headers = new HttpHeaders();
		headers.add("Allow", "OPTIONS,HEAD,GET,PUT,DELETE");
		return new ResponseEntity<>(null, headers, HttpStatus.NO_CONTENT);
	}
	@RequestMapping(value = "account", method = RequestMethod.GET)
	@ResponseBody
	@ResponseStatus(HttpStatus.OK)
	public AccountList read(){
		AccountList list = new AccountList();
		list.setValue(this.accountService.getAllAccounts());
		return list;
	}
	
	@RequestMapping(value = "account/{id}", method = RequestMethod.GET)
	@ResponseBody
	@ResponseStatus(HttpStatus.OK)
	public Account read(@PathVariable("id") long id){
		Account account = this.accountService.getAccount(id);
		if(account == null){
			throw new ResourceNotFoundException();
		}
		return account;
	}
	
	public ResponseEntity<Account> create(@RequestBody AccountForm form)
	{
		
	}
	
	@XmlRootElement(name = "accounts")
	public static class AccountList
	{
		private List<Account> accounts;
		
		@XmlElement(name = "account")
		public List<Account> getValue(){
			return accounts;
		}
		
		public void setValue(List<Account> accounts){
			this.accounts = accounts;
		}
		
	}
}
